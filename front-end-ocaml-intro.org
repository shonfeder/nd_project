#+TITLE: [WIP] A Tutorial Introduction to Full Stack OCaml using js_of_ocaml and Opium

*NOTE*: This material may eventually be used to build out a tutorial, but
 currently they are very much just working notes jotted down as I figure things
 out.

* Basic setup for a full stack ocaml project:
** TODO Frontend
*** TODO Initialize your project

#+BEGIN_SRC sh
dune init proj myproject --libs core_kernel,js_of_ocaml # TODO what else?
cd myproject
dune build
#+END_SRC

*** Add a makefile to simplify builds
Create a file =Makefile= at the root with

#+BEGIN_SRC makefile
.DEFULAT_GOAL := all

.PHONY: deps
deps:
	-dune build
	opam install . --deps-only --with-test

.PHONY: build
build:
	dune build @default

.PHONY: all
all: deps build

.PHONY: run
run: build
	dune exec myproject
#+END_SRC

*** Define your package and dependencies

In the =dune-project= file at your project root

#+BEGIN_SRC dune
(lang dune 1.11)
(generate_opam_files true)

(name myproject)
(version 0.1.0)

(authors "Your Name")
; (license MIT)
; (source (TODO))
(maintainers "Your Info")
; (homepage "TODO")
; (bug_reports "TODO")
; (documentation "TODO")

(package
 (name myproject)
 (synopsis "TODO")
 (description "TODO")
 (depends
  (dune (>= 1.11.3))

  (ocaml (>= 4.08.0))
  (core_kernel (>= v0.12.2))

  (js_of_ocaml (>= 3.4.0))
  (js_of_ocaml-ppx (>= 3.4.0))
  (js_of_ocaml-ppx_deriving_json (>= 3.4.0))
  (js_of_ocaml-lwt (>= 3.4.0))

  (ppx_deriving (>= 4.4))
))
#+END_SRC

Install the new deps

#+BEGIN_SRC sh
make deps
#+END_SRC

*** TODO Add a frontend component

While in the root directory of your project

#+BEGIN_SRC sh
dune init exe frontend frontend --public --libs core_kernel,js_of_ocaml --ppx js_of_ocaml-ppx
#+END_SRC

Makes an executable component in the =frontend= directory.

Add the following alias to the =frontend/dune= file to make sure the js target
is built:

#+BEGIN_SRC dune
;; TODO Explains
(alias
 (name default)
 (deps main.bc.js))
#+END_SRC

*** TODO Build and test the frontend

#+BEGIN_SRC sh
dune build @default
node _build/default/frontend/main.bc.js
#=> Hello, World!
#+END_SRC

Check =frontend/main.ml= to see the source code executed to greet you.

** TODO Backend
*** Add Opium as a dependency backend

# TODO Combine into initial deps section?

Add opium as a dependency in the =dune-package= file

#+BEGIN_SRC dune
;..
(depends
 ;...
 (opium (>= 0.17.1))
)
 ;..
#+END_SRC

Add opium as a library in you =bin/dune= file

#+BEGIN_SRC dune
(executable
 (public_name myproject)
 (name main)
 (libraries core_kernel opium))
#+END_SRC

Update the deps

#+BEGIN_SRC
make deps
#+END_SRC
*** TODO Add static content
In =public/index.html=:

#+BEGIN_SRC html
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>My Title</title>
    <meta http-equiv="Content-Type"
    content="text/html; charset=utf-8" />
    <script type="text/javascript" src="/js/main.bc.js"></script>
  </head>
</html>

#+END_SRC

*** TODO Serve your static content

In =bin/main.ml=

#+BEGIN_SRC ocaml
open Opium.Std

let js =
  Middleware.static
    (* TODO move to a nicer place? *)
    ~local_path:"./_build/default/frontend"
    ~uri_prefix:"/js"
    ()

let index =
  Middleware.static
    ~local_path:"./public"
    ~uri_prefix:"/"
    ()

let root =
  get "/" begin fun _req ->
    redirect' (Uri.of_string "/index.html")
  end

let () =
  print_endline (Sys.getcwd ());
  App.empty
  |> middleware js
  |> middleware index
  |> root
  |> App.run_command
#+END_SRC

*** TODO Run the server

#+BEGIN_SRC sh
make run
#+END_SRC

And navigate to [[http://localhost:3000/]].

*NOTE:* These WIP notes don't currently guide the reader to add any js code that
 would show up when the page is loaded, so unless they've suplied that
 themselves, the page will be blank.
* A reactive web app using incr_dom
** TODO Add deps
In =dune-project=

#+BEGIN_SRC dune
  (incr_dom (>= v0.12.0))
  (ppx_jane (>= v0.12.0))
#+END_SRC

Install new deps with =make deps=

** TODO Add libs and preprocessor to frontend component
#+BEGIN_SRC dune

(executable
 ; ...
 (libraries
   ;...
   incr_dom)
 (preprocess
  (pps
    ;...
    ppx_jane)))
#+END_SRC

Then check that building works

** TODO Walk through basic app (adapting janestreet tutorial)

*** TODO Build up the page by introducing =Vdom= =Node= elements
